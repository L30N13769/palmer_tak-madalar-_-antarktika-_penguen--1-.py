# -*- coding: utf-8 -*-
"""Palmer Takımadaları (Antarktika) penguen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13I4E31P18SpFO5QdOpChUBszAlBfubmt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

from google.colab import drive
drive.mount('/content/drive')

# Update the file path to point to the file in your Google Drive
data=pd.read_csv('/content/drive/My Drive/penguins_lter.csv') # Changed the path
data.head()

# Türlerin dağılımını yazdırma
print("\nTürlerin Dağılımı:")
print(data['Species'].value_counts())


# Türlerin yüzdelik dağılımını hesaplama
species_percentage = data['Species'].value_counts(normalize=True) * 100

# Türlerin yüzdelik dağılımını yazdırma
print("\nTürlerin Yüzdelik Dağılımı:")
print(species_percentage)

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Veri setini okuma
data = pd.read_csv('/content/drive/My Drive/penguins_lter.csv')

# Pairplot oluşturma
sns.pairplot(data, hue="Species", markers=["o", "s", "d"])

# Başlık ekleme
plt.suptitle("Türlere Göre Özellik Dağılımı", y=1.02)

# Grafiği gösterme
plt.show()

# Sayısal verileri seçme
numeric_data = data.select_dtypes(include=["float64", "int64"])

# Korelasyon matrisini hesaplama ve ısı haritası oluşturma
plt.figure(figsize=(8, 6))
sns.heatmap(numeric_data.corr(), annot=True, cmap="coolwarm")
plt.title("Özellikler Arasındaki Korelasyon")
plt.show()

data.dtypes

data.isnull().sum()

import pandas as pd

# Veri setini yükleme
data = pd.read_csv('/content/drive/My Drive/penguins_lter.csv')

# Sadece belirtilen sütunları tutma
columns_to_keep = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)', 'Species']
data = data[columns_to_keep]

print(data.head())

# Eksik verileri sadece belirtilen sütunlar için doldurma
columns_to_fill = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)']
data[columns_to_fill] = data[columns_to_fill].fillna(data[columns_to_fill].mean())

from sklearn.preprocessing import LabelEncoder

# LabelEncoder ile kategorik etiketlere dönüştürme
label_encoder = LabelEncoder()
data['Species'] = label_encoder.fit_transform(data['Species'])

print(data['Species'].unique())

data.head()

data.dtypes

X = data.drop(columns="Species") # Change 'species' to 'Species'
y = data["Species"] # Change 'species' to 'Species'

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Verileri standartlaştırma
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model= SVC(kernel="linear", random_state=42)
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report

# Test verileri ile tahmin yapma
y_pred = model.predict(X_test)

# Doğruluk oranını hesaplama
accuracy = accuracy_score(y_test, y_pred)
print(f"Doğruluk Oranı: {accuracy:.2f}")

# Sınıflandırma raporunu yazdırma
print("Sınıflandırma Raporu:")
print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay

# Karmaşıklık matrisi gösterimi
ConfusionMatrixDisplay.from_estimator(model, X_test, y_test, cmap="Blues")
plt.xlabel("Tahminler")
plt.ylabel("Gerçek Değerler")
plt.title("Karmaşıklık Matrisi")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.datasets import load_iris

# Veriyi yükleyelim (İris veri seti)
iris = load_iris()
X = iris.data[:, :2]  # Sepal length ve Sepal width
y = iris.target

# Veriyi eğitim ve test setlerine ayıralım
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# SVC Modeli (linear kernel)
model = SVC(kernel='linear', random_state=42)
model.fit(X_train, y_train)

# Karar sınırlarını görselleştirebilmek için meshgrid oluşturalım
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1

xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.5), np.arange(y_min, y_max, 0.5))

# Meshgrid üzerinde tahmin yapalım ve sonuçları görselleştirelim
Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Görselleştirme
plt.figure(figsize=(8, 6))
plt.contourf(xx, yy, Z, cmap='coolwarm', alpha=0.5)  # Opaklık biraz düşürüldü
plt.scatter(X[:, 0], X[:, 1], c=y, cmap='coolwarm', edgecolors='black', s=100, marker='x')  # Farklı işaretçiler ve boyut
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('SVM Linear: Karar Sınırları ve Etiketler')  # Yeni başlık
plt.colorbar()  # Renk çubuğu ekleyelim
plt.show()

def predict_species():
    print("Lütfen aşağıdaki bilgileri girin:")
    culmen_length = float(input("Culmen Length (mm): "))
    culmen_depth = float(input("Culmen Depth (mm): "))
    flipper_length = float(input("Flipper Length (mm): "))
    body_mass = float(input("Body Mass (g): "))

    # Girişi standartlaştırma
    input_data = scaler.transform([[culmen_length, culmen_depth, flipper_length, body_mass]])

    # Tahmin yapma
    prediction = model.predict(input_data)

    # Sayısal etiketleri tür adlarına dönüştürme
    species = {0: 'Adelie', 1: 'Chinstrap', 2: 'Gentoo'}[prediction[0]]

    # Tahmin edilen türün adını yazdırma
    print(f"Tahmin edilen tür: {species}")

# Tahmin fonksiyonunu çağırma
predict_species()

import pandas as pd

data = pd.read_csv('/content/drive/My Drive/penguins_lter.csv')  # Dosya adını değiştir



# Baştan, ortadan ve sondan 5 satırı seç
# 'df' yerine 'data' kullanarak DataFrame'i başvurun
head_rows = data.head(5).to_string(index=False)
middle_rows = data.iloc[len(data) // 2 - 2 : len(data) // 2 + 3].to_string(index=False)
tail_rows = data.tail(5).to_string(index=False)

# Sonucu yazdır
print("Baştan 5 Satır:\n", head_rows)
print("\nOrtadan 5 Satır:\n", middle_rows)
print("\nSondan 5 Satır:\n", tail_rows)